<?php

namespace Hyva\TwintPayment\Magewire\Payment\PlaceOrderService;

use Hyva\Checkout\Model\Magewire\Component\EvaluationResultFactory;
use Hyva\Checkout\Model\Magewire\Component\EvaluationResultInterface;
use Hyva\Checkout\Model\Magewire\Payment\AbstractOrderData;
use Hyva\Checkout\Model\Magewire\Payment\AbstractPlaceOrderService;
use Magento\Framework\Pricing\PriceCurrencyInterface;
use Magento\Framework\View\LayoutFactory;
use Magento\Payment\Model\InfoInterface;
use Magento\Quote\Api\CartManagementInterface;
use Magento\Quote\Model\Quote;
use Magento\Sales\Api\OrderRepositoryInterface;
use Twint\Magento\Block\Frontend\ScanQrModal;
use Twint\Magento\Model\Pairing;
use Twint\Magento\Model\PairingHistory;
use Twint\Magento\Service\ClientService;
use Twint\Magento\Util\CryptoHandler;
use Twint\Sdk\Value\Order;

class TwintRegularCheckoutService extends AbstractPlaceOrderService
{
    private ?Order $twintOrder = null;
    private ?Pairing $pairing = null;
    private ?PairingHistory $pairingHistory = null;

    public function __construct(
        private readonly ClientService $clientService,
        private readonly CryptoHandler $cryptoHandler,
        private readonly LayoutFactory $layoutFactory,
        private readonly OrderRepositoryInterface $orderRepository,
        private readonly PriceCurrencyInterface $priceCurrency,
        CartManagementInterface $cartManagement,
        ?AbstractOrderData $orderData = null,
    ) {
        parent::__construct($cartManagement, $orderData);
    }

    public function placeOrder(Quote $quote): int
    {
        $orderId = parent::placeOrder($quote); // TODO: Change the autogenerated stub

        $order = $this->orderRepository->get($orderId);

        /** @var InfoInterface $payment */
        $payment = $order->getPayment();

        $order->setCanSendNewEmailFlag(false);

        $amount = $this->priceCurrency->convertAndRound($order->getBaseGrandTotal());

        /** @var Pairing $pairing */
        [$twintOrder, $twintPairing, $twintPairingHistory] = $this->clientService->createOrder($payment, $amount);

        $this->twintOrder     = $twintOrder;
        $this->pairing        = $twintPairing;
        $this->pairingHistory = $twintPairingHistory;

        return $orderId;
    }

    public function evaluateCompletion(EvaluationResultFactory $resultFactory, ?int $orderId = null): EvaluationResultInterface
    {
        /** @var ScanQrModal $block */
        $block = $this->layoutFactory->create()->createBlock(ScanQrModal::class);
        $block->setTemplate('Twint_Magento::qr.phtml');

        $params = [
            'success'   => true,
            'id'        => $this->pairing->getId(),
            'pairingId' => $this->cryptoHandler->hash($this->pairing->getPairingId()),
            'token'     => $this->pairing->getToken(),
            'amount'    => $this->priceCurrency->format($this->pairing->getAmount()),
            'modal'     => $block->toHtml(),
        ];

        return $resultFactory->createExecutable('custom-modal')->withParams($params);
    }
}
