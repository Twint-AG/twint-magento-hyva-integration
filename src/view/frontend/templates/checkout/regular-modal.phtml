<?php

/** @var \Magento\Framework\Escaper $escaper */
/** @var \Magento\Framework\View\Element\Template $block */
/** @var \Hyva\Theme\Model\ViewModelRegistry $viewModels */
/** @var \Hyva\Theme\ViewModel\Modal $modalViewModel */
/** @var \Hyva\Theme\ViewModel\HyvaCsp $hyvaCsp */

?>

<div>
    <div x-data="twintModal" x-init="initialize">
        <div x-cloak x-spread="overlay" x-bind="overlay" class="fixed inset-0 flex items-center justify-center text-left bg-black bg-opacity-50" style="z-index: 40;">
            <div x-ref="dialog"
                 role="dialog"
                 class="twint text-16"
                 data-role="modal"
                 data-type="<%- data.type %>"
                 tabindex="0">
                <div data-role="focusable-start" tabindex="0"></div>
                <div class="modal-inner-wrap twint tw-modal"
                     data-role="focusable-scope">
                    <header class="twint-modal-header sticky top-0 flex justify-between items-center bg-white">
                        <img class="tw-logo hidden md:block ml-4" src="<?= $block->getViewFileUrl('Twint_Magento::images/twint_logo.png') ?>" alt="<?= __("TWINT Logo"); ?>">
                        <button @click="hide"
                                id="tw-close"
                                class="flex items-center justify-between sm:justify-start mx-4"
                                data-role="closeBtn"
                                type="button">
                            <span class="order-last sm:order-first"><?= __('Cancel checkout') ?></span>
                            <svg class="mr-3 md:mr-0 md:ml-3" width="14" height="13" viewBox="0 0 14 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M1.40001 12.8078L0.692261 12.1L6.29226 6.50001L0.692261 0.900011L1.40001 0.192261L7.00001 5.79226L12.6 0.192261L13.3078 0.900011L7.70776 6.50001L13.3078 12.1L12.6 12.8078L7.00001 7.20776L1.40001 12.8078Z" fill="#1C1B1F"/>
                            </svg>
                        </button>
                    </header>
                    <div id="twint-body-content" class="twint-modal-content p-0 md:p-4" data-role="content"></div>
                </div>
                <div data-role="focusable-end" tabindex="0"></div>
            </div>
        </div>
    </div>
</div>

<script>
    "use strict";

    function twintModal() {
        return Object.assign(
            hyva.modal(),
            {
                initialize() {
                    // Wait for the Evaluation frontend to complete its initialization.
                    window.addEventListener('checkout:init:evaluation', () => {
                        // The validator name "foo-authentication" corresponds to the name specified in the FooPlaceOrderService::evaluateCompletion method.
                        hyvaCheckout.evaluation.registerExecutable('twint-show-modal', (result) => {
                            this.config = result.arguments.params;

                            let modalContent = document.getElementById('twint-body-content');
                            modalContent.innerHTML = this.config.modal;

                            modalContent.querySelector('#qr-modal-content').style.display = 'block';
                            modalContent.querySelector('.to-pay').style.display = 'block';
                            modalContent.querySelector('.on-success').style.display = 'none';
                            modalContent.querySelector('.on-failed').style.display = 'none';

                            modalContent.querySelector('#twint-amount').innerHTML = this.config.amount;
                            modalContent.querySelector('#qr-token').value = this.config.token;

                            let qr = modalContent.querySelector("#qrcode");
                            qr.innerHTML = '';

                            new QRCode(qr, {
                                text: this.config.token,
                                width: 300,
                                height: 300,
                                colorDark: "#000000",
                                colorLight: "#ffffff",
                                correctLevel: QRCode.CorrectLevel.H
                            });

                            this.registerCancelOrder();
                            this.registerMonitorOrder();

                            this.show();
                        })
                    })
                },

                registerCancelOrder() {
                    const origHide = this.hide;
                    this.hide = (value) => {
                        origHide.call(this, value);
                        fetch(this.config.cancel_url).catch(error => console.error('Error:', error));
                    }
                },

                registerMonitorOrder() {
                    let timer = null;
                    const origHide = this.hide;

                    const checkStatus = () => {
                        fetch(this.config.monitor_url)
                            .then(response => response.json())
                            .then(response => {
                                if (response.finish === true && response.paid === true) {
                                    if (timer) {
                                        clearInterval(timer);
                                    }
                                    this.onSuccess();
                                }
                                if (response.finish === true && response.paid === false) {
                                    if (timer) {
                                        clearInterval(timer);
                                    }
                                    this.onFailed();
                                }
                            })
                            .catch(error => console.error('Failed to check status:', error));
                    };

                    timer = setInterval(checkStatus, 2000);

                    this.hide = (value) => {
                        origHide.call(this, value);
                        if (!timer) return;
                        clearInterval(timer);
                    };
                },

                onSuccess() {
                    let modalContent = document.getElementById('twint-body-content');
                    modalContent.querySelector('.to-pay').style.display = 'none';
                    modalContent.querySelector('.on-success').style.display = 'block';
                    modalContent.querySelector('.on-failed').style.display = 'none';
                    window.location = this.config.success_url;
                },

                onFailed() {
                    let modalContent = document.getElementById('twint-body-content');
                    modalContent.querySelector('.to-pay').style.display = 'none';
                    modalContent.querySelector('.on-success').style.display = 'none';
                    modalContent.querySelector('.on-failed').style.display = 'block';
                },
            }
        )
    }

    window.addEventListener('init-external-scripts', () => {
        const script = document.createElement('script')
        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js';
        script.type = 'text/javascript';
        document.head.append(script);
    }, {once: true, passive: true});

    window.addEventListener(
        'alpine:init',
        () => Alpine.data('twintModal', twintModal),
        {once: true}
    )
</script>

<?php $hyvaCsp->registerInlineScript() ?>
